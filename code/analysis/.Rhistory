forest_fire = function(data, ds) {
# List of nodes
d_nodes <- distinct(data, X0)
# Pick 1 node uar
picked <- sample_n(d_nodes,1)
# Add node to the burned list
burned <<- rbind(burned, data.frame(X0=c(picked$X0)))
# Get value from node picked
random_picked <- picked$X0
# Get neighbor of picked
current_neighbor <- data[which(data$X0==random_picked),]
#current_neighbor <- current_neighbor$X1
#cat('Total neighbor: ', random_picked ,' : ', unlist(current_neighbor$X1),'\n')
# Picking a value at random from a geometric distribution with prob 0.3 (so it has the required mean)
distri <- rgeom(n = 1, prob = 0.3)
# Pick the minimum from the number of items in the neighbor or the random number from before
# Prevents error
distri <- min(distri, nrow(current_neighbor))
# Sample the n (distri) member from the neighborhood at random
current_neighbor_sample <- sample_n(current_neighbor, distri)
#cat('For #sample ', distri, ' ~ neighbor of ', random_picked, '\t', unlist(current_neighbor_sample$X1), ' len ', nrow(current_neighbor_sample), '\n')
if (nrow(current_neighbor_sample) > 0) {
# For each of these sampled
for (x in 1:nrow(current_neighbor_sample)) {
# Add the sampled to the result
#cat("Start\t",current_neighbor_sample$X1[x],"\n")
if (ds==1){
ENRON_sample <<- rbind(ENRON_sample, data.frame(X0=c(current_neighbor_sample$X0[x]),X1=c(current_neighbor_sample$X1[x])))
}else{
BK_sample <<- rbind(BK_sample, data.frame(X0=c(current_neighbor_sample$X0[x]),X1=c(current_neighbor_sample$X1[x])))
}
# Start the spreader
forest_fire_spreader(data, current_neighbor_sample$X1[x], ds)
}
}
}
#Working with 0.5% of data
n_sample_ENRON <- as.integer(nrow(ENRON) * 0.005)
n_sample_BK <- as.integer(nrow(BRIGHTKITE) * 0.005)
while(nrow(ENRON_sample) <= n_sample_ENRON){
forest_fire(ENRON,1)
}
while(nrow(BK_sample) <= n_sample_BK){
forest_fire(BRIGHTKITE,2)
}
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(igraph)
BA_model <- sample_pa(n, power = 1, m = NULL, out.dist = NULL, out.seq = NULL,
out.pref = FALSE, zero.appeal = 1, directed = TRUE,
algorithm = c("psumtree", "psumtree-multiple", "bag"),
start.graph = NULL)
n <- 10000
BA_model <- sample_pa(n, power = 1, m = NULL, out.dist = NULL, out.seq = NULL,
out.pref = FALSE, zero.appeal = 1, directed = TRUE,
algorithm = c("psumtree", "psumtree-multiple", "bag"),
start.graph = NULL)
View(BA_model)
n <- 10000
BA_model <- sample_pa(n, power = 1, m = NULL, out.dist = NULL, out.seq = NULL,
out.pref = FALSE, zero.appeal = 1, directed = TRUE,
algorithm = c("psumtree", "psumtree-multiple", "bag"),
start.graph = NULL)
plot(BA_model)
n <- 10000
BA_model <- sample_pa(n, power = 1, m = NULL, out.dist = NULL, out.seq = NULL,
out.pref = FALSE, zero.appeal = 1, directed = TRUE,
algorithm = c("psumtree", "psumtree-multiple", "bag"),
start.graph = NULL)
write_graph(BA_model, "./bamodel1.txt", format = c("edgelist"))
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(ggplot2)
library(igraph)
library(ggplot2)
model1 <- read.table("~/ReposUPC/CSN-lab6/code/data/model1.txt", quote="\"", comment.char="")
View(model1)
ggplot() +
geom_point(aes(model1$V2, model1$V1, color = "points")) +
ggtitle("Model 4+ checking") +
labs(x = 'vertices', y = 'mean dependency length', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(model1$V1, model1$V2, color = "points")) +
ggtitle("Model 4+ checking") +
labs(x = 'vertices', y = 'mean dependency length', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(model1$V1, model1$V2, color = "points")) +
ggtitle("Model 4+ checking") +
labs(x = 'vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
model2 <- read.table("~/ReposUPC/CSN-lab6/code/data/model2.txt", quote="\"", comment.char="")
View(model2)
ggplot() +
geom_point(aes(model1$V1, model1$V2, color = "points")) +
ggtitle("Model 1") +
labs(x = 'vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(model2$V1, model2$V2, color = "points")) +
ggtitle("Model 2") +
labs(x = 'vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
View(model2)
model3 <- read.table("~/ReposUPC/CSN-lab6/code/data/model3.txt", quote="\"", comment.char="")
View(model3)
ggplot() +
geom_point(aes(model1$V1, model1$V2, color = "points")) +
ggtitle("Model 1") +
labs(x = 'vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(model2$V1, model2$V2, color = "points")) +
ggtitle("Model 2") +
labs(x = 'vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(model3$V1, model3$V2, color = "points")) +
ggtitle("Model 3") +
labs(x = 'vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
library(igraph)
library(ggplot2)
library(dplyr)
library(igraph)
library(ggplot2)
library(dplyr)
model1_ag <- model1 %>% count(V1,V2)
View(model1_ag)
model1 %>% count(V2)
model1_count <- model1 %>% count(V2)
model1_count
ggplot() +
geom_point(aes(model1_count$n, model1_count$V2, color = "points")) +
ggtitle("Model 1") +
labs(x = '# vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
model1_count <- model1 %>% count(V2)
model2_count <- model2 %>% count(V2)
model3_count <- model3 %>% count(V2)
ggplot() +
geom_point(aes(model1_count$n, model1_count$V2, color = "points")) +
ggtitle("Model 1") +
labs(x = '# vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(model2_count$n, mode21_count$V2, color = "points")) +
ggtitle("Model 2") +
labs(x = '# vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(model1_count$n, model1_count$V2, color = "points")) +
ggtitle("Model 1") +
labs(x = '# vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(model2_count$n, model2_count$V2, color = "points")) +
ggtitle("Model 2") +
labs(x = '# vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(model3_count$n, model3_count$V2, color = "points")) +
ggtitle("Model 3") +
labs(x = '# vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(model1$V1, model1$V2, color = "points")) +
ggtitle("Model 1") +
labs(x = 'vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(model2$V1, model2$V2, color = "points")) +
ggtitle("Model 2") +
labs(x = 'vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(model3$V1, model3$V2, color = "points")) +
ggtitle("Model 3") +
labs(x = 'vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
knitr::opts_chunk$set(echo = TRUE)
model1 = read.table("../code/data/model1.txt", header = TRUE, as.is = c("V1","V2"))
model1 = read.table("/code/data/model1.txt", header = TRUE, as.is = c("V1","V2"))
model1 = read.table("code/data/model1.txt", header = TRUE, as.is = c("V1","V2"))
model1 = read.table("code/data/model1.txt", header = FALSE, as.is = c("V1","V2"))
View(model1)
library(igraph)
library(ggplot2)
library(dplyr)
library(igraph)
library(ggplot2)
library(dplyr)
model1 = read.table("code/data/model1.txt", header = FALSE, as.is = c("V1","V2"))
model2 = read.table("code/data/model2.txt", header = FALSE, as.is = c("V1","V2"))
model3 = read.table("code/data/model3.txt", header = FALSE, as.is = c("V1","V2"))
# First import the model.txt files naming first column V1 and second V2
model1_count <- model1 %>% count(V2)
model2_count <- model2 %>% count(V2)
model3_count <- model3 %>% count(V2)
ggplot() +
geom_point(aes(model1_count$n, model1_count$V2, color = "points")) +
ggtitle("Model 1") +
labs(x = '# vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(model2_count$n, model2_count$V2, color = "points")) +
ggtitle("Model 2") +
labs(x = '# vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(model3_count$n, model3_count$V2, color = "points")) +
ggtitle("Model 3") +
labs(x = '# vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
knitr::opts_chunk$set(echo = TRUE)
model1 = read.table("../data/graph_a2fg.txt", header = FALSE)
model1_s <- model1 %>% select(V1,V2)
library(igraph)
library(ggplot2)
library(dplyr)
library(igraph)
library(ggplot2)
library(dplyr)
model1 = read.table("../data/graph_a2fg.txt", header = FALSE)
model1_s <- model1 %>% select(V1,V2)
G <- graph.data.frame(model1_s, directed = FALSE)
V(G)
E(G)
knitr::opts_chunk$set(echo = F)
par(mfrow=c(1,2))
testing_threshold(erdos_renyi_1, 'Erdos-Renyi with p=0.015 above threshold', beta=0.01, gamma=0.1, simp = F)
testing_threshold <- function(graph, title, beta, gamma, simp=T){
eig=eigen(as_adj(graph),only.values = T)
l_eig=max(eig$values)
trash=1/l_eig
colors=viridis(6)
res<-simulation(graph = graph, step = 15, gamma = gamma, beta = beta,simp = simp)
plot(res, type='l', ylim=c(0,1000), col=colors[1], lwd=3, main = title, xlab = 'Time', ylab='Infected nodes')
}
par(mfrow=c(1,2))
testing_threshold(graph_lattice_1, 'Lattice with 1 neig above threshold', beta=0.25, gamma=0.3)
require(igraph, quietly = T)
require(viridis, quietly = T)
require(kableExtra,quietly = T)
simulation<- function(graph,p_0=0.2, step=100,
beta=0.1, gamma= 0.1, simp=T){
time_serie<-c()
nodes<-(V(graph))
n<-length(nodes)
x_0<-rep(p_0,n)
x<-x_0
adjacency_matrix<-as_adj(graph)
time_serie[1]<-sum(x)
for (s in 2:step) {
if (simp==T) {
sigma<-prod(1-(x*beta*adjacency_matrix[1,])[which(adjacency_matrix[1,]!=0)])
}else{
sigma=c()
for (i in 1:1000) {
sigma[i]<-prod(1-(x*beta*adjacency_matrix[i,])[which(adjacency_matrix[i,]!=0)])}
}
x_new<-1-(1-(1-gamma)*x)*sigma
x<-x_new
infected<- sum(x)
time_serie[s]<-infected
}
return(time_serie)
}
par(mfrow=c(1,2))
res<-simulation(graph = graph, step = 100, beta = 0.3, gamma=0.5,simp = T)
graph<-make_lattice(1000,circular = T, nei = 1,directed = F)
par(mfrow=c(1,2))
res<-simulation(graph = graph, step = 100, beta = 0.3, gamma=0.5,simp = T)
plot(res, type='l', ylim=c(0,400), col='gold', lwd=3, main = 'Simplified model', xlab = 'Time', ylab='Infected nodes')
res<-simulation(graph = graph, step = 100, beta = 0.3, gamma=0.5,simp = F)
plot(res, type='l', ylim=c(0,400), col='gold', lwd=3, main = 'Base model', xlab = 'Time', ylab='Infected nodes')
get_stat<- function(graph){
eig=eigen(as_adj(graph),only.values = T)
l_eig=max(eig$values)
trash=1/l_eig
nedges=length(E(graph))
k<-mean(degree(graph))
res<-c(nedges, l_eig, trash, k)
return(res)
}
graph_lattice_1<-make_lattice(1000, nei=1,directed = F, circular = T)
graph_lattice_2<-make_lattice(1000, nei=2,directed = F, circular = T)
erdos_renyi_1<-erdos.renyi.game(1000,p.or.m = 0.015,directed = F)
erdos_renyi_2<-erdos.renyi.game(1000,p.or.m = 0.1,directed = F)
barabasi_albert<-barabasi.game(n = 1000, power = 2, directed = F,start.graph = make_lattice(100, nei=1, directed=F, circular = T), m = 56)
full<-make_full_graph(1000)
graphs<-data.frame(row.names =c('Number of edges', 'Leading eigenvalue', 'Trashold', 'Mean degree'))
graphs['Lattice with 1 neighbor']<-get_stat(graph_lattice_1)
graphs['Lattice with 2 neighbor']<-get_stat(graph_lattice_2)
graphs['Erdos renyi with p=0.015']<-get_stat(erdos_renyi_1)
graphs['Erdos renyi with p=0.1']<-get_stat(erdos_renyi_2)
graphs['Barabasi albert']<-get_stat(barabasi_albert)
graphs['Complete graph']<-get_stat(full)
changing_beta<-function(graph, title, simp=T){
eig=eigen(as_adj(graph),only.values = T)
l_eig=max(eig$values)
trash=1/l_eig
gamma<-0.5
beta_1<-0.0001
beta_2<-0.001
beta_3<-0.01
beta_4<-0.1
beta_5<-0.25
beta_6<-0.5
betas<-c(beta_2,beta_3, beta_4, beta_5,beta_6)
colors=viridis(6)
res<-simulation(graph = graph, step = 15, beta = beta_1, gamma=gamma,simp = simp)
plot(res, type='l', ylim=c(0,1000), col=colors[1], lwd=3, main = title, xlab = 'Time', ylab='Infected nodes')
for (i in 1:5) {
res<-simulation(graph = graph, step =15, beta = betas[i], gamma=gamma,simp = simp)
lines(res, col=colors[i+1], lwd=3)
}
legend("topleft", legend=c(beta_1,betas),
col=colors[1:6], lwd=3)
}
changing_gamma <- function(graph, title, simp=T){
eig=eigen(as_adj(graph),only.values = T)
l_eig=max(eig$values)
trash=1/l_eig
beta<-0.5
gamma_1<-0.0001
gamma_2<-0.001
gamma_3<-0.01
gamma_4<-0.1
gamma_5<-0.25
gamma_6<-0.5
gammas <- c(gamma_2,gamma_3, gamma_4, gamma_5, gamma_6)
colors=viridis(6)
res<-simulation(graph = graph, step = 15, gamma = gamma_1, beta=beta,simp = simp)
plot(res, type='l', ylim=c(0,1000), col=colors[1], lwd=3, main = title, xlab = 'Time', ylab='Infected nodes')
for (i in 1:5) {
res<-simulation(graph = graph, step =15, gamma = gammas[i], beta=beta,simp = simp)
lines(res, col=colors[i+1], lwd=3)
}
legend("topleft", legend=c(gamma_1,gammas),
col=colors[1:6], lwd=3)
}
changing_gamma_2 <- function(graph, title, simp=T){
eig=eigen(as_adj(graph),only.values = T)
l_eig=max(eig$values)
trash=1/l_eig
beta<-0.1
gamma_1<-0.0001
gamma_2<-0.001
gamma_3<-0.01
gamma_4<-0.1
gamma_5<-0.25
gamma_6<-0.5
gammas <- c(gamma_2,gamma_3, gamma_4, gamma_5, gamma_6)
colors=viridis(6)
res<-simulation(graph = graph, step = 15, gamma = gamma_1, beta=beta,simp = simp)
plot(res, type='l', ylim=c(0,1000), col=colors[1], lwd=3, main = title, xlab = 'Time', ylab='Infected nodes')
for (i in 1:5) {
res<-simulation(graph = graph, step =15, gamma = gammas[i], beta=beta,simp = simp)
lines(res, col=colors[i+1], lwd=3)
}
legend("topleft", legend=c(gamma_1,gammas),
col=colors[1:6], lwd=3)
}
testing_threshold <- function(graph, title, beta, gamma, simp=T){
eig=eigen(as_adj(graph),only.values = T)
l_eig=max(eig$values)
trash=1/l_eig
colors=viridis(6)
res<-simulation(graph = graph, step = 15, gamma = gamma, beta = beta,simp = simp)
plot(res, type='l', ylim=c(0,1000), col=colors[1], lwd=3, main = title, xlab = 'Time', ylab='Infected nodes')
}
par(mfrow=c(1,2))
testing_threshold(graph_lattice_1, 'Lattice with 1 neig above threshold', beta=0.25, gamma=0.3)
testing_threshold(graph_lattice_1, 'Lattice with 1 neig below threshold', beta=0.25, gamma=0.7)
par(mfrow=c(1,2))
testing_threshold(graph_lattice_2, 'Lattice with 2 neig above threshold', beta=0.25, gamma=0.8)
testing_threshold(graph_lattice_2, 'Lattice with 2 neig below threshold', beta=0.15, gamma=0.9)
par(mfrow=c(1,2))
testing_threshold(erdos_renyi_1, 'Erdos-Renyi with p=0.015 above threshold', beta=0.01, gamma=0.1, simp = F)
testing_threshold(erdos_renyi_1, 'Erdos-Renyi with p=0.015 below threshold', beta=0.01, gamma=0.2, simp = F)
par(mfrow=c(1,2))
testing_threshold(erdos_renyi_2, 'Erdos-Renyi with p=0.1 above threshold', beta=0.001, gamma=0.07, simp = F)
testing_threshold(erdos_renyi_2, 'Erdos-Renyi with p=0.1 below threshold', beta=0.001, gamma=0.15, simp = F)
par(mfrow=c(1,2))
testing_threshold(barabasi_albert, 'Barabasi-Albert above threshold', beta=0.001, gamma=0.15, simp = F)
testing_threshold(barabasi_albert, 'Barabasi-Albert below threshold', beta=0.001, gamma=0.22, simp = F)
setwd('/Users/BleuDChan/ReposUPC/commub/code/analysis')
library(igraph)
library(igraph)
graph_out_degree <- read.graph('../result/C-elegans-frontal-link-list_in.graphml', format = "gml")
graph_out_degree <- read.graph('../result/C-elegans-frontal-link-list_in.graphml', format = "gml")
graph_out_degree <- read.graph('../result/sample.graphml', format = "gml")
graph_out_degree <- read.graph('../result/sample.graphml', format = "graphml")
graph_out_degree <- read.graph('../result/C-elegans-frontal-link-list_in.graphml', format = "graphml")
V(graph_out_degree)
V(graph_out_degree)
E(graph_out_degree)
library(igraph)
graph_out_degree <- read.graph('../result/C-elegans-frontal-link-list_in.graphml', format = "graphml")
graph_in_degree <- read.graph('../result/C-elegans-frontal-link-list_out.graphml', format = "graphml")
graph_out_degree <- read.graph('../result/C-elegans-frontal-link-list_in.graphml', format = "graphml")
graph_out_degree <- read.graph('../result/C-elegans-frontal-link-list_in.graphml', format = "graphml")
graph_out_degree <- read.graph('../result/C-elegans-frontal-link-list_in.graphml', format = "graphml")
graph_out_degree <- read.graph('../result/C-elegans-frontal-link-list_in.graphml', format = "graphml")
graph_in_degree <- read.graph('../result/C-elegans-frontal-link-list_out.graphml', format = "graphml")
vertex_attr(g_out, "community")
g_out <- read.graph('../result/C-elegans-frontal-link-list_in.graphml', format = "graphml")
g_in <- read.graph('../result/C-elegans-frontal-link-list_out.graphml', format = "graphml")
vertex_attr(g_out, "community")
vertex_attr(g_out, "comm")
vertex_attr()
vertex_attr(g_out, "comm")
vertex_attr(g_out, "p_i")
vertex_attr(g_out, "community")
vertex_attr(g_out, "participation index")
vertex_attr(g_out, "community")
vertex_attr(g_out, "participation index")
vertex_attr(g_out, "dispersion index")
vertex_attr(g_out, "global hubness")
vertex_attr(g_out, "local hubness")
library(igraph)
library(ggplot2)
ggplot() +
geom_point(aes(vertex_attr(g_out, "global hubness"), vertex_attr(g_out, "local hubness"), color = "points")) +
ggtitle("Model 1") +
labs(x = '# vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
vertex_attr(g_out, "community")
vertex_attr(g_out, "participation index")
vertex_attr(g_out, "dispersion index")
vertex_attr(g_out, "global hubness")
vertex_attr(g_out, "local hubness")
g_out <- read.graph('../result/C-elegans-frontal-link-list_in.graphml', format = "graphml")
g_in <- read.graph('../result/C-elegans-frontal-link-list_out.graphml', format = "graphml")
vertex_attr(g_out, "community")
vertex_attr(g_out, "participation index")
vertex_attr(g_out, "dispersion index")
vertex_attr(g_out, "global hubness")
vertex_attr(g_out, "local hubness")
vertex_attr(g_out, "community")
vertex_attr(g_out, "participation index")
vertex_attr(g_out, "dispersion index")
vertex_attr(g_out, "global hubness")
vertex_attr(g_out, "local hubness")
g_out <- read.graph('../result/C-elegans-frontal-link-list_in.graphml', format = "graphml")
g_in <- read.graph('../result/C-elegans-frontal-link-list_out.graphml', format = "graphml")
V(graph_out_degree)
E(graph_out_degree)
vertex_attr(g_out, "community")
vertex_attr(g_out, "participation index")
vertex_attr(g_out, "dispersion index")
vertex_attr(g_out, "global hubness")
vertex_attr(g_out, "local hubness")
g_out <- read.graph('../result/C-elegans-frontal-link-list_in.graphml', format = "graphml")
g_in <- read.graph('../result/C-elegans-frontal-link-list_out.graphml', format = "graphml")
vertex_attr(g_out, "community")
vertex_attr(g_out, "participation index")
vertex_attr(g_out, "dispersion index")
vertex_attr(g_out, "global hubness")
vertex_attr(g_out, "local hubness")
ggplot() +
geom_point(aes(vertex_attr(g_out, "global hubness"), vertex_attr(g_out, "local hubness"), color = "points")) +
ggtitle("Model 1") +
labs(x = '# vertex', y = 'degree', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(vertex_attr(g_out, "local hubness"), vertex_attr(g_out, "global hubness"), color = "points")) +
ggtitle("Out Degree") +
labs(x = 'Local Hubness', y = 'Global Hubness', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(vertex_attr(g_out, "local hubness"), vertex_attr(g_out, "global hubness"), color = "points")) +
ggtitle("Out Degree") +
labs(x = 'Local Hubness', y = 'Global Hubness', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(vertex_attr(g_out, "participation index"), vertex_attr(g_out, "global hubness"), color = "points")) +
ggtitle("Out Degree") +
labs(x = 'Participation Index', y = 'Global Hubness', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(vertex_attr(g_out, "local hubness"), vertex_attr(g_out, "global hubness"), color = "points")) +
ggtitle("Out Degree") +
labs(x = 'Local Hubness', y = 'Global Hubness', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(vertex_attr(g_out, "participation index"), vertex_attr(g_out, "global hubness"), color = "points")) +
ggtitle("Out Degree") +
labs(x = 'Participation', y = 'Global Hubness', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(vertex_attr(g_out, "participation index"), vertex_attr(g_out, "dispersion index"), color = "points")) +
ggtitle("Out Degree") +
labs(x = 'Participation', y = 'Disperion', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(vertex_attr(g_in, "local hubness"), vertex_attr(g_in, "global hubness"), color = "points")) +
ggtitle("Out Degree") +
labs(x = 'Local Hubness', y = 'Global Hubness', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(vertex_attr(g_in, "participation index"), vertex_attr(g_in, "global hubness"), color = "points")) +
ggtitle("Out Degree") +
labs(x = 'Participation', y = 'Global Hubness', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
ggplot() +
geom_point(aes(vertex_attr(g_in, "participation index"), vertex_attr(g_in, "dispersion index"), color = "points")) +
ggtitle("Out Degree") +
labs(x = 'Participation', y = 'Disperion', color="Legend") + scale_color_manual(values=c("#F8766D", "#00BFC4"))+
theme(legend.position = "none")
